{"version":3,"sources":["types/SortType.ts","components/GoodsList.tsx","App.tsx","index.tsx"],"names":["SortType","GoodsList","goods","isReverse","SortBy","lengthMin","copyOfGoods","filter","good","length","Alfabet","sort","g1","g2","localeCompare","Length","reverse","map","React","memo","goodsFromServer","App","useState","isVisible","makeVisible","isReversed","makeReverse","Nothing","selectSort","changeMinimum","className","type","onClick","name","id","onChange","currentTarget","Number","value","Array","fill","_","index","ReactDOM","render","document","getElementById"],"mappings":"wJAAYA,E,sDAAAA,K,kBAAAA,E,gBAAAA,E,mBAAAA,M,gBCUNC,EAA6B,SAAC,GAE7B,IADLC,EACI,EADJA,MAAOC,EACH,EADGA,UAAWC,EACd,EADcA,OAAQC,EACtB,EADsBA,UAEpBC,EAAcJ,EAAMK,QAAO,SAAAC,GAAI,OAAIA,EAAKC,QAAUJ,KAExD,OAAQD,GACN,KAAKJ,EAASU,QACZJ,EAAYK,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,cAAcD,MAC9C,MACF,KAAKb,EAASe,OACZT,EAAYK,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGH,OAASI,EAAGJ,UAUhD,OAJIN,GACFG,EAAYU,UAIZ,6BACGV,EAAYW,KAAI,SAAAT,GAAI,OACnB,6BACGA,GADMA,SAQFU,MAAMC,KAAKlB,GCpCpBmB,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAkFaC,EA/EO,WACpB,MAAiCC,oBAAS,GAA1C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA6BJ,mBAAStB,EAAS2B,SAA/C,mBAAOvB,EAAP,KAAewB,EAAf,KACA,EAAmCN,mBAAS,GAA5C,mBAAOjB,EAAP,KAAkBwB,EAAlB,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,uCACCP,GACC,qCACE,cAAC,EAAD,CACErB,MAAOkB,EACPjB,UAAWsB,EACXrB,OAAQA,EACRC,UAAWA,IAEb,wBACE0B,KAAK,SACLC,QAAS,kBAAMN,GAAaD,IAF9B,qBAMA,uBACA,wBACEM,KAAK,SACLC,QAAS,kBAAMJ,EAAW5B,EAASU,UAFrC,6BAMA,wBACEqB,KAAK,SACLC,QAAS,kBAAMJ,EAAW5B,EAASe,SAFrC,4BAMA,uBACA,wBACEgB,KAAK,SACLC,QAAS,WACPJ,EAAW5B,EAAS2B,SACpBD,GAAY,GACZG,EAAc,IALlB,mBAUA,uBACA,wBACEI,KAAK,gBACLC,GAAG,IACHC,SAAU,gBAAGC,EAAH,EAAGA,cAAH,OACRP,EAAcQ,OAAOD,EAAcE,SAJvC,SAOGC,MAAM,IAAIC,KAAK,MAAMvB,KAAI,SAACwB,EAAGC,GAAJ,OACxB,wBACEJ,MAAOI,EAAQ,EADjB,SAGGA,EAAQ,aAMjBnB,GACA,wBACEQ,KAAK,SACLC,QACE,kBAAMR,GAAY,IAHtB,uBCjFRmB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,U","file":"static/js/main.ed3ceab7.chunk.js","sourcesContent":["export enum SortType {\n  Alfabet = 'alfabet',\n  Length = 'length',\n  Nothing = 'nothing',\n}\n","import React from 'react';\nimport { SortType } from '../types/SortType';\n\ntype Props = {\n  goods: string[],\n  isReverse: boolean,\n  SortBy: SortType,\n  lengthMin: number\n};\n\nconst GoodsList: React.FC<Props> = ({\n  goods, isReverse, SortBy, lengthMin,\n}) => {\n  const copyOfGoods = goods.filter(good => good.length >= lengthMin);\n\n  switch (SortBy) {\n    case SortType.Alfabet:\n      copyOfGoods.sort((g1, g2) => g1.localeCompare(g2));\n      break;\n    case SortType.Length:\n      copyOfGoods.sort((g1, g2) => g1.length - g2.length);\n      break;\n    default:\n      break;\n  }\n\n  if (isReverse) {\n    copyOfGoods.reverse();\n  }\n\n  return (\n    <ul>\n      {copyOfGoods.map(good => (\n        <li key={good}>\n          {good}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default React.memo(GoodsList);\n","import React, { useState } from 'react';\nimport './App.css';\nimport GoodsList from './components/GoodsList';\nimport { SortType } from './types/SortType';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst App: React.FC = () => {\n  const [isVisible, makeVisible] = useState(false);\n  const [isReversed, makeReverse] = useState(false);\n  const [SortBy, selectSort] = useState(SortType.Nothing);\n  const [lengthMin, changeMinimum] = useState(1);\n\n  return (\n    <div className=\"App\">\n      <h1>Goods</h1>\n      {isVisible && (\n        <>\n          <GoodsList\n            goods={goodsFromServer}\n            isReverse={isReversed}\n            SortBy={SortBy}\n            lengthMin={lengthMin}\n          />\n          <button\n            type=\"button\"\n            onClick={() => makeReverse(!isReversed)}\n          >\n            Reverse\n          </button>\n          <br />\n          <button\n            type=\"button\"\n            onClick={() => selectSort(SortType.Alfabet)}\n          >\n            Sort by alfabet\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => selectSort(SortType.Length)}\n          >\n            Sort by length\n          </button>\n          <br />\n          <button\n            type=\"button\"\n            onClick={() => {\n              selectSort(SortType.Nothing);\n              makeReverse(false);\n              changeMinimum(1);\n            }}\n          >\n            Reset\n          </button>\n          <br />\n          <select\n            name=\"numbersSelect\"\n            id=\"1\"\n            onChange={({ currentTarget }) => (\n              changeMinimum(Number(currentTarget.value))\n            )}\n          >\n            {Array(10).fill(null).map((_, index) => (\n              <option\n                value={index + 1}\n              >\n                {index + 1}\n              </option>\n            ))}\n          </select>\n        </>\n      )}\n      {!isVisible && (\n        <button\n          type=\"button\"\n          onClick={\n            () => makeVisible(true)\n          }\n        >\n          Start\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}